#coding:utf8
from django.shortcuts import render_to_response
import urllib2
import json
from datetime import datetime
from django.shortcuts import render,render_to_response,HttpResponseRedirect,HttpResponse
from dw.models import *
import time
'''
def index(request):
    context = {}
    #Pad名称
    page_padname = urllib2.urlopen('http://59.110.45.134:9001/api/1.2.1/listAllPads?apikey=078bc3b1b6093668f9210ab634a2c61f360e2457de03fb87394869def92a75ea').read()
    padIDs = json.loads(page_padname)['data']['padIDs']
    context['padIDs'] = padIDs
    authors = []
    context['authors'] = authors

    return render_to_response('index.html',context)
'''

def show(request):
    response = urllib2.urlopen('http://59.110.45.134:9001/api/1.2.1/listAllPads?apikey=078bc3b1b6093668f9210ab634a2c61f360e2457de03fb87394869def92a75ea')
    jsonData = json.load(response)
    padIDs = jsonData['data']['padIDs']
    return render_to_response('show.html', locals())


def create_pad(request):
    return render_to_response('create_pad.html')



def newtask(request,*args,**kwargs):    #创建任务单
    project_archive = kwargs['project']  #项目归档判断

    url = kwargs['project_id']

    project_type = project_archive.project_type
    milestones = project_type.milestone.all()
    prioritys = project_type.task_priority.all()
    statuss = project_type.task_status.all()
    components = project_type.task_component.all()
    types = project_type.task_type.all()
    versions = project_type.task_version.all()

    milestone_default = project_type.milestone.filter(owner_project=url,default=True)[0]
    priority_default = project_type.task_priority.filter(owner_project=url,default=True)[0]
    component_default = project_type.task_component.filter(owner_project=url,default=True)[0]
    type_default = project_type.task_type.filter(owner_project=url,default=True)[0]
    version_default = project_type.task_version.filter(owner_project=url,default=True)[0]

    #task_grades = Taskgrade.objects.filter(owner_project=project_archive)
    try:
        template = Template.objects.get(owner_project=url)
    except:
        template = None

    start_date_Array = time.strptime(str(datetime.now()).split('.')[0], '%Y-%m-%d %H:%M:%S')
    now_date = time.strftime("%Y/%m/%d %H:%M", start_date_Array)

    user_now = request.session.get('USERNAME',False)
    user_head_portrait = User.objects.get(username=user_now).head_portrait
    errors = []
    if request.method == 'POST':
        summary = request.POST.get('summary')
        description = request.POST.get('content')
        task_type = request.POST.get('type')
        milestone = request.POST.get('milestone')
        component = request.POST.get('component')
        priority = request.POST.get('priority')
        owner = request.POST.get('owner')
        version = request.POST.get('version')
        task_image = request.FILES.get('task_image')


        start_date = request.POST.get('start_date')
        text = request.POST.get('text')
        end_date = request.POST.get('end_date')
        story_point =request.POST.get('story_point')

        task_relevance = request.POST.get('relevance')
        task_id = request.POST.get('task_id')
        relevance_type = request.POST.get('relevance_type')

        task_grade = request.POST.get('task_grade')

        if end_date == '':
            end_date = now_date
        if start_date == '':
            start_date = now_date
        task_start_date = datetime.strptime(start_date,'%Y/%m/%d %H:%M')
        task_end_date = datetime.strptime(end_date,'%Y/%m/%d %H:%M')


        duration_timestamip= int(time.mktime(time.strptime(end_date,'%Y/%m/%d %H:%M'))) - int(time.mktime(time.strptime(start_date,'%Y/%m/%d %H:%M')))
        duration = duration_timestamip / 86400

        type = Type.objects.get(id=task_type)
        #component = Component.objects.get(id=component)
        priority = Priority.objects.get(id=priority)
        version = Versions.objects.get(id=version)
        milestone = Milestone.objects.get(id=milestone)
        creator = User.objects.get(username=user_now)
        owner_project = Project.objects.get(id=url)
        if task_image is not None:
            image = task_image.name.split('.')[-1]
        else:
            image = None

        #检测属主是否存在，只添加存在的属主
        if owner.split(',') is not None and len(owner)>0:
            task_owners = ''
            for task_owner in owner.split(','):
                if User.objects.filter(username=task_owner):
                    task_owners = task_owners + task_owner + ','
            owner_list=list(task_owners)
            if len(owner_list)>0:
                owner_list.pop()
            owner = "".join(owner_list)

        #获取显示id
        task_num = Taskorder.objects.filter(owner_project=project_archive).count()

        if task_num == 0:
            display_id = 1
        else:
            display_id = int(Taskorder.objects.filter(owner_project=project_archive,parent=0).order_by('-id')[0].display_id) + 1

        if duration == 0:
            duration = 1

        if summary is not None and len(summary)>0:
            if image == 'tiff':
                errors.append('您上传的图片web不支持显示')
            elif start_date is not None and len(start_date)>0:
                create_task = Taskorder.objects.create(summary=summary, creator=creator, description=description, type=type,
                                        milestone=milestone, reporter=user_now,
                                        component=component, priority=priority, task_image=task_image, owner=owner,
                                        version=version, display_id=display_id,
                                        status=statuss[0], owner_project=owner_project, start_date=task_start_date,
                                        duration=duration, end_date=task_end_date, predict_start_date=task_start_date,
                                        predict_duration=duration, predict_end_date=task_end_date
                                        )

                if story_point is not None and len(story_point) > 0:
                    Taskorder.objects.filter(id=create_task.id).update(storypoint=story_point)

                #if task_grade is not None and len(task_grade) >0:
                    #Taskorder.objects.filter(id=create_task.id).update(grade=task_grade)


                id = Taskorder.objects.filter(creator=user_now).order_by('-id')[0].id

                #任务单关联
                if task_relevance == 'task_relevance':
                    if task_id is not None and len(task_id)>0:
                        Gantt_links.objects.create(source=id,target=task_id,type=relevance_type)
                return HttpResponseRedirect('/%s/task/%s'%(url,id),locals())
            else:
                errors.append('请输入任务起始时间')

        else:
            errors.append('请输入任务单概述')
    return render_to_response('create_task.html',locals())

